<Project Sdk="Microsoft.NET.Sdk.IL">

  <PropertyGroup>
    <FileVersion>1.0.0</FileVersion>
    <InformationalVersion>1.0.0</InformationalVersion>
    <SignAssembly>false</SignAssembly>
  </PropertyGroup>
  
  <PropertyGroup>
    <TargetFrameworks>net40</TargetFrameworks>
    
    <IsPackable>true</IsPackable>
    <PackageDescription>
      Provides the System.Runtime.CompilerServices.Unsafe class, which provides generic, low-level functionality for manipulating pointers.

      Commonly Used Types:
      System.Runtime.CompilerServices.Unsafe
    </PackageDescription>
  </PropertyGroup>
  
  <PropertyGroup>
    <!-- Make sure that the DebuggableAttribute is set properly. -->
    <DebugOptimization>IMPL</DebugOptimization>
    <DebugOptimization Condition="'$(Configuration)' == 'Release'">OPT</DebugOptimization>
    <IlasmFlags>$(IlasmFlags) -DEBUG=$(DebugOptimization)</IlasmFlags>
    <EnableDefaultCompileItems>false</EnableDefaultCompileItems>
  </PropertyGroup>

  <PropertyGroup>
    <CoreAssembly>mscorlib</CoreAssembly>
    <ExtraMacros>#define $(TargetFramework)</ExtraMacros>
    <CoreCompileDependsOn>$(CoreCompileDependsOn);GenerateVersionFile</CoreCompileDependsOn>
  </PropertyGroup>

  <ItemGroup>
    <Compile Include="System.Runtime.CompilerServices.Unsafe.il" />
  </ItemGroup>
  
  <ItemGroup>
    <!-- mscorlib is passed in as an explicit reference from C# targets but not via the IL SDK. -->
    <Reference Include="$(CoreAssembly)"
               Condition="'$(TargetFramework)' != 'netstandard2.0'" />
  </ItemGroup>
  
  <ItemGroup>
    <PackageReference Include="Microsoft.NET.Sdk.IL" Version="8.0.0" />
  </ItemGroup>

  <Target Name="GenerateVersionFile"
          DependsOnTargets="GetAssemblyVersion;ResolveReferences"
          Inputs="$(MSBuildAllProjects)"
          Outputs="'$(VersionFilePath)">
    
    <PropertyGroup>
      <IncludePath>$([MSBuild]::NormalizeDirectory('$(IntermediateOutputPath)', 'version'))</IncludePath>
      <IncludePathTrimmed>$(IncludePath.TrimEnd('\'))</IncludePathTrimmed>
      <IlasmFlags>$(IlasmFlags) -INCLUDE="$(IncludePathTrimmed)"</IlasmFlags>
      <VersionFilePath Condition="'$(VersionFilePath)' == ''">$([MSBuild]::NormalizePath('$(IncludePath)', 'version.h'))</VersionFilePath>
      <_AssemblyVersion>$(AssemblyVersion.Replace('.', ':'))</_AssemblyVersion>
      <_coreAssemblyName Condition="'%(ReferencePath.FileName)' == '$(CoreAssembly)'">%(ReferencePath.FusionName)</_coreAssemblyName>
      <_assemblyNamePattern><![CDATA[[^,]+, Version=(?<v1>[0-9]+)\.(?<v2>[0-9]+)\.(?<v3>[0-9]+)\.(?<v4>[0-9]+), .*PublicKeyToken=(?<p1>[0-9a-f]{2})(?<p2>[0-9a-f]{2})(?<p3>[0-9a-f]{2})(?<p4>[0-9a-f]{2})(?<p5>[0-9a-f]{2})(?<p6>[0-9a-f]{2})(?<p7>[0-9a-f]{2})(?<p8>[0-9a-f]{2})]]></_assemblyNamePattern>
      <_coreAssemblyVersion>$([System.Text.RegularExpressions.Regex]::Replace(
        $(_coreAssemblyName),
        $(_assemblyNamePattern),
        '${v1}:${v2}:${v3}:${v4}'))</_coreAssemblyVersion>
      <_coreAssemblyPublicKeyToken>$([System.Text.RegularExpressions.Regex]::Replace(
        $(_coreAssemblyName),
        $(_assemblyNamePattern),
        '${p1} ${p2} ${p3} ${p4} ${p5} ${p6} ${p7} ${p8}').ToUpperInvariant())</_coreAssemblyPublicKeyToken>
      <_VersionFileContents>
        <![CDATA[
#define CORE_ASSEMBLY "$(CoreAssembly)"
#define ASSEMBLY_VERSION "$(_AssemblyVersion)"
#define CORE_ASSEMBLY_VERSION "$(_CoreAssemblyVersion)"
#define FILE_VERSION "{string('$(FileVersion)')}"
#define INFORMATIONAL_VERSION "{string('$(InformationalVersion)')}"
$(ExtraMacros)
// Metadata version: v4.0.30319
.assembly extern CORE_ASSEMBLY
{
  .publickeytoken = ($(_coreAssemblyPublicKeyToken) )
  .ver CORE_ASSEMBLY_VERSION
}
 ]]>
      </_VersionFileContents>
    </PropertyGroup>

    <WriteLinesToFile
      File="$(VersionFilePath)"
      Lines="$(_VersionFileContents)"
      Overwrite="true"
      WriteOnlyWhenDifferent="true" />

    <ItemGroup>
      <FileWrites Include="$(VersionFilePath)" />
    </ItemGroup>
  </Target>

  <!-- Microsoft.NET.Sdk.IL doesn't support strong naming, so we have to add a step to sign the assembly after it is built.
      We add the .publickey element to the .il (hard coded for now) to make this work. -->
  <Target Name="SignAssembly" AfterTargets="AfterBuild">
    <Exec Command="&quot;$(TargetFrameworkSDKToolsDirectory)sn.exe&quot; -R &quot;$(TargetPath)&quot; &quot;$(AssemblyOriginatorKeyFile)&quot;" />
  </Target>

</Project>
